// Autogenerated from Pigeon (v3.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

/* RequestInfoMessage */

const flutter::EncodableMap* RequestInfoMessage::request_data() const {
  return request_data_ ? &(*request_data_) : nullptr;
}
void RequestInfoMessage::set_request_data(
    const flutter::EncodableMap* value_arg) {
  request_data_ = value_arg ? std::optional<flutter::EncodableMap>(*value_arg)
                            : std::nullopt;
}
void RequestInfoMessage::set_request_data(
    const flutter::EncodableMap& value_arg) {
  request_data_ = value_arg;
}

flutter::EncodableMap RequestInfoMessage::ToEncodableMap() const {
  return flutter::EncodableMap{
      {flutter::EncodableValue("requestData"),
       request_data_ ? flutter::EncodableValue(*request_data_)
                     : flutter::EncodableValue()},
  };
}

RequestInfoMessage::RequestInfoMessage() {}

RequestInfoMessage::RequestInfoMessage(flutter::EncodableMap map) {
  auto encodable_request_data = map.at(flutter::EncodableValue("requestData"));
  if (const flutter::EncodableMap* pointer_request_data =
          std::get_if<flutter::EncodableMap>(&encodable_request_data)) {
    request_data_ = *pointer_request_data;
  }
}

SamsungCheckoutApiCodecSerializer::SamsungCheckoutApiCodecSerializer() {}
flutter::EncodableValue SamsungCheckoutApiCodecSerializer::ReadValueOfType(
    uint8_t type, flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return flutter::CustomEncodableValue(RequestInfoMessage(
          std::get<flutter::EncodableMap>(ReadValue(stream))));

    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void SamsungCheckoutApiCodecSerializer::WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const {
  if (const flutter::CustomEncodableValue* custom_value =
          std::get_if<flutter::CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(RequestInfoMessage)) {
      stream->WriteByte(128);
      WriteValue(flutter::EncodableValue(
                     std::any_cast<RequestInfoMessage>(*custom_value)
                         .ToEncodableMap()),
                 stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/** The codec used by SamsungCheckoutApi. */
const flutter::StandardMessageCodec& SamsungCheckoutApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(
      &SamsungCheckoutApiCodecSerializer::GetInstance());
}

/** Sets up an instance of `SamsungCheckoutApi` to handle messages through the
 * `binary_messenger`. */
void SamsungCheckoutApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                               SamsungCheckoutApi* api) {
  {
    auto channel =
        std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
            binary_messenger,
            "dev.flutter.pigeon.SamsungCheckoutApi.setRequestData",
            &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const flutter::EncodableValue& message,
                const flutter::MessageReply<flutter::EncodableValue>& reply) {
            flutter::EncodableMap wrapped;
            try {
              auto args = std::get<flutter::EncodableList>(message);
              auto encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                wrapped.insert(
                    std::make_pair(flutter::EncodableValue("error"),
                                   WrapError("msg_arg unexpectedly null.")));
                reply(flutter::EncodableValue(wrapped));
                return;
              }
              const RequestInfoMessage& msg_arg =
                  std::any_cast<const RequestInfoMessage&>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_msg_arg));
              std::optional<FlutterError> output = api->SetRequestData(msg_arg);
              if (output.has_value()) {
                wrapped.insert(std::make_pair(flutter::EncodableValue("error"),
                                              WrapError(output.value())));
              } else {
                wrapped.insert(std::make_pair(flutter::EncodableValue("result"),
                                              flutter::EncodableValue()));
              }
            } catch (const std::exception& exception) {
              wrapped.insert(std::make_pair(flutter::EncodableValue("error"),
                                            WrapError(exception.what())));
            }
            reply(flutter::EncodableValue(wrapped));
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

flutter::EncodableMap SamsungCheckoutApi::WrapError(
    std::string_view error_message) {
  return flutter::EncodableMap(
      {{flutter::EncodableValue("message"),
        flutter::EncodableValue(std::string(error_message).data())},
       {flutter::EncodableValue("code"), flutter::EncodableValue("Error")},
       {flutter::EncodableValue("details"), flutter::EncodableValue()}});
}
flutter::EncodableMap SamsungCheckoutApi::WrapError(const FlutterError& error) {
  return flutter::EncodableMap(
      {{flutter::EncodableValue("message"),
        flutter::EncodableValue(error.message)},
       {flutter::EncodableValue("code"), flutter::EncodableValue(error.code)},
       {flutter::EncodableValue("details"), error.details}});
}
